// Code generated by MockGen. DO NOT EDIT.
// Source: grpcserver.go
//
// Generated by this command:
//
//	mockgen -source=grpcserver.go -destination=mocks/books_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	booksauthors "Book/pkg/models/booksAuthors"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// ChekAuth mocks base method.
func (m *MockAuthService) ChekAuth(ctx context.Context, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChekAuth", ctx, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChekAuth indicates an expected call of ChekAuth.
func (mr *MockAuthServiceMockRecorder) ChekAuth(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChekAuth", reflect.TypeOf((*MockAuthService)(nil).ChekAuth), ctx, email)
}

// Login mocks base method.
func (m *MockAuthService) Login(ctx context.Context, email, password string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, email, password)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthServiceMockRecorder) Login(ctx, email, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthService)(nil).Login), ctx, email, password)
}

// Registration mocks base method.
func (m *MockAuthService) Registration(ctx context.Context, email, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Registration", ctx, email, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// Registration indicates an expected call of Registration.
func (mr *MockAuthServiceMockRecorder) Registration(ctx, email, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Registration", reflect.TypeOf((*MockAuthService)(nil).Registration), ctx, email, password)
}

// MockBookService is a mock of BookService interface.
type MockBookService struct {
	ctrl     *gomock.Controller
	recorder *MockBookServiceMockRecorder
}

// MockBookServiceMockRecorder is the mock recorder for MockBookService.
type MockBookServiceMockRecorder struct {
	mock *MockBookService
}

// NewMockBookService creates a new mock instance.
func NewMockBookService(ctrl *gomock.Controller) *MockBookService {
	mock := &MockBookService{ctrl: ctrl}
	mock.recorder = &MockBookServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookService) EXPECT() *MockBookServiceMockRecorder {
	return m.recorder
}

// CreateBook mocks base method.
func (m *MockBookService) CreateBook(arg0 context.Context, arg1 booksauthors.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockBookServiceMockRecorder) CreateBook(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockBookService)(nil).CreateBook), arg0, arg1)
}

// DeleteBook mocks base method.
func (m *MockBookService) DeleteBook(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBook", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBook indicates an expected call of DeleteBook.
func (mr *MockBookServiceMockRecorder) DeleteBook(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*MockBookService)(nil).DeleteBook), arg0, arg1)
}

// ReadBook mocks base method.
func (m *MockBookService) ReadBook(arg0 context.Context, arg1 booksauthors.Book) ([]booksauthors.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadBook", arg0, arg1)
	ret0, _ := ret[0].([]booksauthors.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadBook indicates an expected call of ReadBook.
func (mr *MockBookServiceMockRecorder) ReadBook(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBook", reflect.TypeOf((*MockBookService)(nil).ReadBook), arg0, arg1)
}

// UpdateBook mocks base method.
func (m *MockBookService) UpdateBook(arg0 context.Context, arg1 int, arg2 booksauthors.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockBookServiceMockRecorder) UpdateBook(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockBookService)(nil).UpdateBook), arg0, arg1, arg2)
}

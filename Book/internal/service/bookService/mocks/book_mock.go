// Code generated by MockGen. DO NOT EDIT.
// Source: bookService.go
//
// Generated by this command:
//
//	mockgen -source=bookService.go -destination=mocks/book_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	booksauthors "Book/pkg/models/booksAuthors"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBookRepository is a mock of BookRepository interface.
type MockBookRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBookRepositoryMockRecorder
}

// MockBookRepositoryMockRecorder is the mock recorder for MockBookRepository.
type MockBookRepositoryMockRecorder struct {
	mock *MockBookRepository
}

// NewMockBookRepository creates a new mock instance.
func NewMockBookRepository(ctrl *gomock.Controller) *MockBookRepository {
	mock := &MockBookRepository{ctrl: ctrl}
	mock.recorder = &MockBookRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookRepository) EXPECT() *MockBookRepositoryMockRecorder {
	return m.recorder
}

// CreateBook mocks base method.
func (m *MockBookRepository) CreateBook(arg0 context.Context, arg1 booksauthors.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockBookRepositoryMockRecorder) CreateBook(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockBookRepository)(nil).CreateBook), arg0, arg1)
}

// DeleteBook mocks base method.
func (m *MockBookRepository) DeleteBook(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBook", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBook indicates an expected call of DeleteBook.
func (mr *MockBookRepositoryMockRecorder) DeleteBook(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*MockBookRepository)(nil).DeleteBook), arg0, arg1)
}

// ReadBook mocks base method.
func (m *MockBookRepository) ReadBook(arg0 context.Context, arg1 booksauthors.Book) ([]booksauthors.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadBook", arg0, arg1)
	ret0, _ := ret[0].([]booksauthors.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadBook indicates an expected call of ReadBook.
func (mr *MockBookRepositoryMockRecorder) ReadBook(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBook", reflect.TypeOf((*MockBookRepository)(nil).ReadBook), arg0, arg1)
}

// UpdateBook mocks base method.
func (m *MockBookRepository) UpdateBook(arg0 context.Context, arg1 int, arg2 booksauthors.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockBookRepositoryMockRecorder) UpdateBook(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockBookRepository)(nil).UpdateBook), arg0, arg1, arg2)
}

// MockbookRedisRepository is a mock of bookRedisRepository interface.
type MockbookRedisRepository struct {
	ctrl     *gomock.Controller
	recorder *MockbookRedisRepositoryMockRecorder
}

// MockbookRedisRepositoryMockRecorder is the mock recorder for MockbookRedisRepository.
type MockbookRedisRepositoryMockRecorder struct {
	mock *MockbookRedisRepository
}

// NewMockbookRedisRepository creates a new mock instance.
func NewMockbookRedisRepository(ctrl *gomock.Controller) *MockbookRedisRepository {
	mock := &MockbookRedisRepository{ctrl: ctrl}
	mock.recorder = &MockbookRedisRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbookRedisRepository) EXPECT() *MockbookRedisRepositoryMockRecorder {
	return m.recorder
}

// DelBook mocks base method.
func (m *MockbookRedisRepository) DelBook(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelBook", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelBook indicates an expected call of DelBook.
func (mr *MockbookRedisRepositoryMockRecorder) DelBook(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelBook", reflect.TypeOf((*MockbookRedisRepository)(nil).DelBook), key)
}

// GetBook mocks base method.
func (m *MockbookRedisRepository) GetBook(key string) (*booksauthors.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBook", key)
	ret0, _ := ret[0].(*booksauthors.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBook indicates an expected call of GetBook.
func (mr *MockbookRedisRepositoryMockRecorder) GetBook(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBook", reflect.TypeOf((*MockbookRedisRepository)(nil).GetBook), key)
}

// SetBook mocks base method.
func (m *MockbookRedisRepository) SetBook(key string, book booksauthors.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBook", key, book)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBook indicates an expected call of SetBook.
func (mr *MockbookRedisRepositoryMockRecorder) SetBook(key, book any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBook", reflect.TypeOf((*MockbookRedisRepository)(nil).SetBook), key, book)
}
